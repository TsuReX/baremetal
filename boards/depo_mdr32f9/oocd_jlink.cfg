#source [find interface/jlink.cfg]
interface jlink
transport select swd
#source [find target/stm32f1x.cfg]

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

set _CHIPNAME k1986ve92qx
set _ENDIAN little
set _WORKAREASIZE 0x1000

#jtag scan chain
if { [using_jtag] } {
    set _CPUTAPID 0x3ba00477
} else {
    #set _CPUTAPID 0x1ba01477
    set _CPUTAPID 0x2ba01477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

if {[using_jtag]} {
   jtag newtap $_CHIPNAME bs -irlen 5
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
adapter_khz 1000

adapter_nsrst_delay 100  
if {[using_jtag]} {
    jtag_ntrst_delay 100
}

reset_config srst_nogate

if {![using_hla]} {
    # if srst is not fitted use SYSRESETREQ to
    # perform a soft reset
    cortex_m reset_config sysresetreq
}

proc load_prog {programmer_image_file programmer_ram_addr programmer_entry_point firmware_image_file} {

	# RAM base 
	set ram_base			0x20000000;
	# RAM size 32kb
	set ram_size			0x00008000;
	# RAM base + 8Kb
	set firmware_ram_addr		0x20002000;
	set firmware_rom_addr		0x08000000;
	# TODO: Evaluate image size
	set firmware_image_size		0x00004000; # 16Kb
	# Stack top in RAM
	set programmer_stack_ram_addr	0x20007FF0;
	# Addres of flashing operation status value
	set op_status			0x20001000;

	# Fill the RAM with zeros
	mwb $ram_base 0x00 $ram_size

	# Load programmer into the RAM
	load_image $programmer_image_file $programmer_ram_addr

	echo "Fill firmware's RAM with magic value"
	mwb $firmware_ram_addr 0xA5 $firmware_image_size

	# Load firmware image into the RAM
	load_image $firmware_image_file $firmware_ram_addr

	# Set arguments for loader
	reg r0 $firmware_ram_addr
	reg r1 $firmware_rom_addr
	reg r2 $firmware_image_size

	# Set programmer entry point and stack base
	reg pc $programmer_entry_point
	reg sp $programmer_stack_ram_addr
	
#	mdw $firmware_rom_addr 16
	
	# Run loader
	resume

	# TODO Waiting time must be depenent of loading completion
	sleep 3000

#	mdw $firmware_rom_addr 2048
#	mdw 0x8001200 1
#	mdw $firmware_rom_addr 1
#	mdw $firmware_rom_addr 1

	echo "Flash programming status"
	mdw $op_status

	# At this point MCU should be reset and run program from flash
#	halt
	exit
}

add_usage_text load_prog "programmer_image_file programmer_ram_addr programmer_entry_point firmware_image_file"
add_help_text load_prog "Loading flash programmer into memory"

proc do {action} {
	echo "ECHO $action"
	if {$action=="debug"} {
		init
		reset halt

	} elseif {$action=="flash"} {
		init
		reset halt
		load_prog fprog.bin 0x20000000 0x20000000 depo_mdr32f9.bin
	} else {
		init
		echo "Select action: debug or flash"
		exit
	}
}

add_usage_text do "action"
add_help_text do "Select action to do: debug, flash."