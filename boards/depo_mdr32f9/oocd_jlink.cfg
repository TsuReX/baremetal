source [find interface/jlink.cfg]
transport select swd
source [find target/stm32f1x.cfg]

proc load_prog {prog_file prog_addr prog_entry image_file} {

	# RAM block 64kb
	set block_size		0x10000;
	# RAM base + 8Kb
	set ram_image_addr	0x20002000;
	set flash_image_addr	0x00000000;
	# TODO: Evaluate image size
	set image_size		0x10000;
	# Stack top RAM base + 128Kb
	set stack_base		0x20021000;
	set op_status		0x20000800;

	# Enable clocks for all SRAM banks
	mww 0x40000220 0x38 1

	mwb $prog_addr 0x00 $block_size

	load_image $prog_file $prog_addr
	#sleep 1000

	echo "Fill by zero RAM block for image."
	mwb $ram_image_addr 0xA5 $image_size
	mdw $ram_image_addr 0x10

	load_image $image_file $ram_image_addr
	# Set arguments for loader
	reg r0 $ram_image_addr
	#reg r0 $prog_addr
	reg r1 $flash_image_addr
	reg r2 $image_size

	# set loader entry point and stack base
	reg pc $prog_entry
	reg sp $stack_base
	# reg lr $prog_entry

	# Run loader
	resume
	# TODO Waiting time must be depenent of loading completion
	sleep 3000
#	mdw 0x00007000 1
#	mdw 0x00008000 1
#	mdw 0x00009000 1
#	mdw 0x0000A000 1
	echo "Flash programming status"
	mdw $op_status

	# At this point MCU should be reset and run program from flash
	#halt
	exit
}

add_usage_text load_prog "prog_file prog_addr prog_entry image_file"
add_help_text load_prog "Loading flash programmer into memory"

proc do {action} {
	echo "ECHO $action"
	if {$action=="debug"} {
		init
		reset halt

	} elseif {$action=="flash"} {
		init
		reset halt
		load_prog fprog.bin 0x20000000 0x20000000 depo_mdr32f9.bin
	} else {
		init
		echo "Select action: debug or flash"
		exit
	}
}

add_usage_text do "action"
add_help_text do "Select action to do: debug, flash."